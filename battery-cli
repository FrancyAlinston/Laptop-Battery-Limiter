#!/bin/bash

# Universal Battery Charge Limit CLI
# Simple interactive tool for managing battery charging limits

THRESHOLD_FILE="/sys/class/power_supply/BAT0/charge_control_end_threshold"
BAT_CAPACITY_FILE="/sys/class/power_supply/BAT0/capacity"
BAT_STATUS_FILE="/sys/class/power_supply/BAT0/status"

# Colors for better UI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored text
print_colored() {
    local color=$1
    local text=$2
    echo -e "${color}${text}${NC}"
}

# Function to check if running as root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        print_colored $RED "⚠️  This operation requires sudo privileges."
        echo "Please run: sudo $(basename $0)"
        exit 1
    fi
}

# Function to check if battery charge control is supported
check_support() {
    if [ ! -f "$THRESHOLD_FILE" ]; then
        print_colored $RED "❌ Battery charge control not supported on this system"
        print_colored $RED "File not found: $THRESHOLD_FILE"
        exit 1
    fi
}

# Function to get current battery info
get_battery_info() {
    local current_limit=$(cat "$THRESHOLD_FILE" 2>/dev/null || echo "N/A")
    local current_level=$(cat "$BAT_CAPACITY_FILE" 2>/dev/null || echo "N/A")
    local battery_status=$(cat "$BAT_STATUS_FILE" 2>/dev/null || echo "N/A")
    
    echo "current_limit:$current_limit"
    echo "current_level:$current_level"
    echo "battery_status:$battery_status"
}

# Function to display battery status
show_battery_status() {
    local info=$(get_battery_info)
    local current_limit=$(echo "$info" | grep "current_limit" | cut -d: -f2)
    local current_level=$(echo "$info" | grep "current_level" | cut -d: -f2)
    local battery_status=$(echo "$info" | grep "battery_status" | cut -d: -f2)
    
    print_colored $CYAN "🔋 Battery Status"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    printf "%-20s %s%%\n" "Current Level:" "$current_level"
    printf "%-20s %s\n" "Status:" "$battery_status"
    printf "%-20s %s%%\n" "Charge Limit:" "$current_limit"
    echo
}

# Function to set charging limit
set_charging_limit() {
    local limit=$1
    
    # Validate input
    if ! [[ "$limit" =~ ^[0-9]+$ ]] || [ "$limit" -lt 50 ] || [ "$limit" -gt 100 ]; then
        print_colored $RED "❌ Invalid limit. Please enter a number between 50 and 100."
        return 1
    fi
    
    print_colored $YELLOW "⚡ Setting battery charge limit to ${limit}%..."
    
    if echo "$limit" > "$THRESHOLD_FILE" 2>/dev/null; then
        local new_limit=$(cat "$THRESHOLD_FILE")
        print_colored $GREEN "✅ Successfully set battery charge limit to ${new_limit}%"
        return 0
    else
        print_colored $RED "❌ Failed to set battery charge limit"
        return 1
    fi
}

# Function to show quick preset options
show_presets() {
    print_colored $PURPLE "🎯 Quick Presets:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "1) 60% - Long-term storage"
    echo "2) 70% - Conservative daily use"
    echo "3) 80% - Recommended daily use"
    echo "4) 90% - Extended use"
    echo "5) 100% - Maximum capacity (removes limit)"
    echo "6) Custom value"
    echo "7) Show current status"
    echo "8) Exit"
    echo
}

# Function to handle preset selection
handle_preset() {
    local choice=$1
    
    case $choice in
        1)
            set_charging_limit 60
            ;;
        2)
            set_charging_limit 70
            ;;
        3)
            set_charging_limit 80
            ;;
        4)
            set_charging_limit 90
            ;;
        5)
            set_charging_limit 100
            print_colored $YELLOW "ℹ️  Charging limit removed. Battery will charge to 100%."
            ;;
        6)
            echo -n "Enter custom limit (50-100): "
            read -r custom_limit
            set_charging_limit "$custom_limit"
            ;;
        7)
            show_battery_status
            return 1  # Don't exit, return to menu
            ;;
        8)
            print_colored $GREEN "👋 Goodbye!"
            exit 0
            ;;
        *)
            print_colored $RED "❌ Invalid option. Please choose 1-8."
            return 1
            ;;
    esac
    
    return 0
}

# Function to show help
show_help() {
    echo "Universal Battery Charge Limit CLI"
    echo
    echo "Usage:"
    echo "  $(basename $0)              # Interactive mode"
    echo "  $(basename $0) <limit>      # Set limit directly (50-100)"
    echo "  $(basename $0) status       # Show battery status"
    echo "  $(basename $0) help         # Show this help"
    echo
    echo "Examples:"
    echo "  sudo $(basename $0)         # Start interactive mode"
    echo "  sudo $(basename $0) 80      # Set limit to 80%"
    echo "  $(basename $0) status       # Show current status"
    echo
}

# Main function
main() {
    # Handle command line arguments
    case "$1" in
        "help"|"--help"|"-h")
            show_help
            exit 0
            ;;
        "status")
            check_support
            show_battery_status
            exit 0
            ;;
        "")
            # Interactive mode
            check_support
            check_root
            
            print_colored $BLUE "🔧 Universal Battery Charge Limit CLI"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo
            
            show_battery_status
            
            while true; do
                show_presets
                echo -n "Choose an option (1-8): "
                read -r choice
                echo
                
                if handle_preset "$choice"; then
                    echo
                    show_battery_status
                    echo
                    print_colored $GREEN "✨ Done! The new limit will persist after reboot."
                    break
                fi
                echo
            done
            ;;
        *)
            # Direct limit setting
            if [[ "$1" =~ ^[0-9]+$ ]]; then
                check_support
                check_root
                show_battery_status
                set_charging_limit "$1"
                if [ $? -eq 0 ]; then
                    echo
                    show_battery_status
                    print_colored $GREEN "✨ Done! The new limit will persist after reboot."
                fi
            else
                print_colored $RED "❌ Invalid argument: $1"
                show_help
                exit 1
            fi
            ;;
    esac
}

# Run main function with all arguments
main "$@"
