#!/usr/bin/env python3

import tkinter as tk
from tkinter import ttk, messagebox
import subprocess
import os
import threading
import time
import json
import urllib.request
import urllib.error
from pathlib import Path

class BatteryControlGUI:
    def __init__(self, root):
        self.root = root
        self.setup_window()
        self.setup_variables()
        self.create_widgets()
        self.update_battery_info()
        self.start_auto_refresh()

    def setup_window(self):
        """Configure the main window"""
        self.root.title("Universal Battery Control Center")
        self.root.geometry("450x600")
        self.root.resizable(False, False)

        # Dark theme colors
        self.bg_color = "#2b2b2b"
        self.card_color = "#3c3c3c"
        self.accent_color = "#4CAF50"
        self.text_color = "#ffffff"
        self.secondary_text = "#b0b0b0"

        self.root.configure(bg=self.bg_color)

        # Configure styles
        self.setup_styles()

    def setup_styles(self):
        """Setup custom styles for widgets"""
        style = ttk.Style()
        style.theme_use('clam')

        # Configure dark theme
        style.configure('Dark.TFrame', background=self.bg_color)
        style.configure('Card.TFrame', background=self.card_color, relief='raised', borderwidth=1)
        style.configure('Dark.TLabel', background=self.bg_color, foreground=self.text_color, font=('Segoe UI', 10))
        style.configure('Title.TLabel', background=self.bg_color, foreground=self.text_color, font=('Segoe UI', 14, 'bold'))
        style.configure('Card.TLabel', background=self.card_color, foreground=self.text_color, font=('Segoe UI', 10))
        style.configure('Accent.TLabel', background=self.card_color, foreground=self.accent_color, font=('Segoe UI', 12, 'bold'))

        # Custom button style
        style.configure('Accent.TButton',
                       background=self.accent_color,
                       foreground='white',
                       font=('Segoe UI', 10, 'bold'),
                       focuscolor='none')
        style.map('Accent.TButton',
                 background=[('active', '#45a049')])

        # Scale style
        style.configure('Accent.Horizontal.TScale',
                       background=self.card_color,
                       troughcolor='#555555',
                       borderwidth=0,
                       lightcolor=self.accent_color,
                       darkcolor=self.accent_color)

    def setup_variables(self):
        """Initialize variables"""
        self.charge_limit_var = tk.IntVar(value=80)
        self.current_level = tk.StringVar(value="--")
        self.battery_status = tk.StringVar(value="--")
        self.power_mode = tk.StringVar(value="Performance")
        self.auto_refresh = True

        # Battery threshold file
        self.threshold_file = "/sys/class/power_supply/BAT0/charge_control_end_threshold"
        self.capacity_file = "/sys/class/power_supply/BAT0/capacity"
        self.status_file = "/sys/class/power_supply/BAT0/status"

        # Version info for updates
        self.current_version = "2.0.0"
        self.github_repo = "FrancyAlinston/Laptop-Battery-Limiter"
        self.release_channel = "stable"  # Can be "stable" or "beta"
        
        # Load settings
        self.load_settings()

    def create_widgets(self):
        """Create all GUI widgets"""
        main_frame = ttk.Frame(self.root, style='Dark.TFrame')
        main_frame.pack(fill='both', expand=True, padx=15, pady=15)

        # Title
        title_label = ttk.Label(main_frame, text="üîã Battery Control Center", style='Title.TLabel')
        title_label.pack(pady=(0, 20))

        # Battery Status Card
        self.create_battery_status_card(main_frame)

        # Charging Limit Card
        self.create_charging_limit_card(main_frame)

        # Power Management Card
        self.create_power_management_card(main_frame)

        # Quick Actions Card
        self.create_quick_actions_card(main_frame)

        # Status Bar
        self.create_status_bar(main_frame)

    def create_battery_status_card(self, parent):
        """Create battery status information card"""
        card = ttk.Frame(parent, style='Card.TFrame')
        card.pack(fill='x', pady=(0, 15), padx=5, ipady=15)

        ttk.Label(card, text="‚ö° Battery Status", style='Accent.TLabel').pack(pady=(10, 5))

        # Battery level display
        level_frame = ttk.Frame(card, style='Card.TFrame')
        level_frame.pack(fill='x', padx=20, pady=10)

        ttk.Label(level_frame, text="Current Level:", style='Card.TLabel').pack(side='left')
        self.level_label = ttk.Label(level_frame, textvariable=self.current_level, style='Accent.TLabel')
        self.level_label.pack(side='right')

        # Battery status
        status_frame = ttk.Frame(card, style='Card.TFrame')
        status_frame.pack(fill='x', padx=20, pady=5)

        ttk.Label(status_frame, text="Status:", style='Card.TLabel').pack(side='left')
        self.status_label = ttk.Label(status_frame, textvariable=self.battery_status, style='Card.TLabel')
        self.status_label.pack(side='right')

        # Progress bar for battery level
        self.battery_progress = ttk.Progressbar(card, length=350, mode='determinate')
        self.battery_progress.pack(pady=10)

    def create_charging_limit_card(self, parent):
        """Create charging limit control card"""
        card = ttk.Frame(parent, style='Card.TFrame')
        card.pack(fill='x', pady=(0, 15), padx=5, ipady=15)

        ttk.Label(card, text="üéØ Charging Limit", style='Accent.TLabel').pack(pady=(10, 5))

        # Current limit display
        limit_display_frame = ttk.Frame(card, style='Card.TFrame')
        limit_display_frame.pack(fill='x', padx=20, pady=10)

        ttk.Label(limit_display_frame, text="Current Limit:", style='Card.TLabel').pack(side='left')
        self.limit_display = ttk.Label(limit_display_frame, text="80%", style='Accent.TLabel')
        self.limit_display.pack(side='right')

        # Slider for setting limit
        slider_frame = ttk.Frame(card, style='Card.TFrame')
        slider_frame.pack(fill='x', padx=20, pady=10)

        ttk.Label(slider_frame, text="50%", style='Card.TLabel').pack(side='left')

        self.limit_scale = ttk.Scale(slider_frame,
                                   from_=50, to=100,
                                   orient='horizontal',
                                   variable=self.charge_limit_var,
                                   style='Accent.Horizontal.TScale',
                                   command=self.on_scale_change)
        self.limit_scale.pack(side='left', fill='x', expand=True, padx=10)

        ttk.Label(slider_frame, text="100%", style='Card.TLabel').pack(side='right')

        # Apply button
        apply_btn = ttk.Button(card, text="Apply Charging Limit",
                              command=self.apply_charging_limit,
                              style='Accent.TButton')
        apply_btn.pack(pady=10)

    def create_power_management_card(self, parent):
        """Create power management controls"""
        card = ttk.Frame(parent, style='Card.TFrame')
        card.pack(fill='x', pady=(0, 15), padx=5, ipady=15)

        ttk.Label(card, text="‚öôÔ∏è Power Management", style='Accent.TLabel').pack(pady=(10, 5))

        # Power mode selection
        mode_frame = ttk.Frame(card, style='Card.TFrame')
        mode_frame.pack(fill='x', padx=20, pady=10)

        ttk.Label(mode_frame, text="Power Mode:", style='Card.TLabel').pack(anchor='w')

        mode_buttons_frame = ttk.Frame(mode_frame, style='Card.TFrame')
        mode_buttons_frame.pack(fill='x', pady=5)

        modes = [("Power Saver", "powersave"), ("Balanced", "balanced"), ("Performance", "performance")]
        for mode_name, mode_value in modes:
            btn = ttk.Radiobutton(mode_buttons_frame, text=mode_name,
                                variable=self.power_mode, value=mode_value,
                                command=lambda m=mode_value: self.set_power_mode(m))
            btn.pack(side='left', padx=5)

    def create_quick_actions_card(self, parent):
        """Create quick action buttons"""
        card = ttk.Frame(parent, style='Card.TFrame')
        card.pack(fill='x', pady=(0, 15), padx=5, ipady=15)

        ttk.Label(card, text="üöÄ Quick Actions", style='Accent.TLabel').pack(pady=(10, 5))

        # Preset buttons
        presets_frame = ttk.Frame(card, style='Card.TFrame')
        presets_frame.pack(fill='x', padx=20, pady=10)

        presets = [
            ("60% Storage", 60),
            ("80% Daily", 80),
            ("100% Full", 100)
        ]

        for i, (text, value) in enumerate(presets):
            btn = ttk.Button(presets_frame, text=text,
                           command=lambda v=value: self.set_preset_limit(v))
            btn.grid(row=0, column=i, padx=5, sticky='ew')
            presets_frame.grid_columnconfigure(i, weight=1)

        # Additional actions
        actions_frame = ttk.Frame(card, style='Card.TFrame')
        actions_frame.pack(fill='x', padx=20, pady=10)

        refresh_btn = ttk.Button(actions_frame, text="üîÑ Refresh",
                               command=self.refresh_battery_info)
        refresh_btn.pack(side='left', padx=5)

        update_btn = ttk.Button(actions_frame, text="üîç Check Updates",
                              command=self.check_for_updates)
        update_btn.pack(side='left', padx=5)

        channel_btn = ttk.Button(actions_frame, text="üîÑ Release Channel",
                               command=self.show_channel_settings)
        channel_btn.pack(side='left', padx=5)

        terminal_btn = ttk.Button(actions_frame, text="üìü Open Terminal CLI",
                                command=self.open_terminal_cli)
        terminal_btn.pack(side='right', padx=5)

    def create_status_bar(self, parent):
        """Create status bar at bottom"""
        status_frame = ttk.Frame(parent, style='Dark.TFrame')
        status_frame.pack(fill='x', pady=(10, 0))

        self.status_text = ttk.Label(status_frame, text="Ready", style='Dark.TLabel')
        self.status_text.pack(side='left')

        self.last_update = ttk.Label(status_frame, text="", style='Dark.TLabel')
        self.last_update.pack(side='right')

    def on_scale_change(self, value):
        """Handle scale value change"""
        limit = int(float(value))
        self.limit_display.config(text=f"{limit}%")

    def check_root_access(self):
        """Check if we have root access"""
        return os.geteuid() == 0

    def run_command_with_sudo(self, command):
        """Run command with sudo if needed"""
        try:
            if self.check_root_access():
                result = subprocess.run(command, shell=True, capture_output=True, text=True)
            else:
                # Use pkexec for GUI sudo prompt
                sudo_command = f"pkexec bash -c '{command}'"
                result = subprocess.run(sudo_command, shell=True, capture_output=True, text=True)

            return result.returncode == 0, result.stdout, result.stderr
        except Exception as e:
            return False, "", str(e)

    def apply_charging_limit(self):
        """Apply the charging limit"""
        limit = self.charge_limit_var.get()

        def apply_limit():
            self.status_text.config(text="Applying charging limit...")

            command = f"echo {limit} > {self.threshold_file}"
            success, stdout, stderr = self.run_command_with_sudo(command)

            if success:
                self.status_text.config(text=f"‚úÖ Charging limit set to {limit}%")
                self.refresh_battery_info()
                messagebox.showinfo("Success", f"Charging limit successfully set to {limit}%")
            else:
                self.status_text.config(text="‚ùå Failed to set charging limit")
                messagebox.showerror("Error", f"Failed to set charging limit:\n{stderr}")

        threading.Thread(target=apply_limit, daemon=True).start()

    def set_preset_limit(self, value):
        """Set a preset charging limit"""
        self.charge_limit_var.set(value)
        self.limit_display.config(text=f"{value}%")
        self.apply_charging_limit()

    def set_power_mode(self, mode):
        """Set system power mode"""
        def set_mode():
            commands = {
                "powersave": "echo powersave | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor",
                "balanced": "echo ondemand | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor",
                "performance": "echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor"
            }

            if mode in commands:
                success, stdout, stderr = self.run_command_with_sudo(commands[mode])
                if success:
                    self.status_text.config(text=f"‚úÖ Power mode set to {mode}")
                else:
                    self.status_text.config(text="‚ùå Failed to set power mode")

        threading.Thread(target=set_mode, daemon=True).start()

    def refresh_battery_info(self):
        """Refresh battery information"""
        def update_info():
            try:
                # Get current battery level
                if os.path.exists(self.capacity_file):
                    with open(self.capacity_file, 'r') as f:
                        level = int(f.read().strip())
                    self.current_level.set(f"{level}%")
                    self.battery_progress['value'] = level

                    # Color code the battery level
                    if level <= 20:
                        self.level_label.configure(foreground="#ff4444")
                    elif level <= 50:
                        self.level_label.configure(foreground="#ffaa00")
                    else:
                        self.level_label.configure(foreground=self.accent_color)

                # Get battery status
                if os.path.exists(self.status_file):
                    with open(self.status_file, 'r') as f:
                        status = f.read().strip()
                    self.battery_status.set(status)

                    # Set status icon
                    status_icons = {
                        "Charging": "üîå",
                        "Discharging": "üîã",
                        "Full": "‚úÖ",
                        "Not charging": "‚è∏Ô∏è"
                    }
                    icon = status_icons.get(status, "üîã")
                    self.status_label.configure(text=f"{icon} {status}")

                # Get current charging limit
                if os.path.exists(self.threshold_file):
                    with open(self.threshold_file, 'r') as f:
                        current_limit = int(f.read().strip())
                    self.charge_limit_var.set(current_limit)
                    self.limit_display.config(text=f"{current_limit}%")

                # Update last refresh time
                current_time = time.strftime("%H:%M:%S")
                self.last_update.config(text=f"Updated: {current_time}")

            except Exception as e:
                self.status_text.config(text=f"‚ùå Error reading battery info: {str(e)}")

        threading.Thread(target=update_info, daemon=True).start()

    def update_battery_info(self):
        """Initial battery info update"""
        self.refresh_battery_info()

    def start_auto_refresh(self):
        """Start automatic refresh of battery info"""
        def auto_refresh():
            while self.auto_refresh:
                self.refresh_battery_info()
                time.sleep(30)  # Refresh every 30 seconds

        threading.Thread(target=auto_refresh, daemon=True).start()

    def open_terminal_cli(self):
        """Open terminal with CLI tool"""
        try:
            subprocess.Popen(['gnome-terminal', '--', 'bash', '-c', 'battery-cli; read -p "Press Enter to close..."'])
        except:
            try:
                subprocess.Popen(['xterm', '-e', 'bash -c "battery-cli; read -p \\"Press Enter to close...\\""'])
            except:
                messagebox.showinfo("Info", "Please run 'battery-cli' in your terminal")

    def check_for_updates(self):
        """Check for updates from GitHub"""
        def check_updates():
            try:
                # Update status
                channel_name = "Beta" if self.release_channel == "beta" else "Stable"
                self.status_text.config(text=f"üîç Checking for {channel_name} updates...")

                # GitHub API URL with release channel support
                if self.release_channel == "beta":
                    # For beta, check all releases including pre-releases
                    api_url = f"https://api.github.com/repos/{self.github_repo}/releases"
                else:
                    # For stable, check only latest stable release
                    api_url = f"https://api.github.com/repos/{self.github_repo}/releases/latest"

                # Make request to GitHub API
                with urllib.request.urlopen(api_url, timeout=10) as response:
                    if response.getcode() == 200:
                        data = json.loads(response.read().decode())
                        
                        if self.release_channel == "beta":
                            # Find the latest release (including pre-releases)
                            if isinstance(data, list) and len(data) > 0:
                                latest_release = data[0]  # First is most recent
                            else:
                                raise Exception("No releases found")
                        else:
                            latest_release = data
                        
                        latest_version = latest_release.get('tag_name', '').lstrip('v')
                        release_url = latest_release.get('html_url', '')
                        release_notes = latest_release.get('body', 'No release notes available.')
                        is_prerelease = latest_release.get('prerelease', False)

                        # Compare versions
                        if self.compare_versions(latest_version, self.current_version):
                            # New version available
                            channel_info = " (Beta)" if is_prerelease else " (Stable)"
                            self.root.after(0, lambda: self.show_update_dialog(latest_version + channel_info, release_url, release_notes))
                        else:
                            # Up to date
                            channel_name = "Beta" if self.release_channel == "beta" else "Stable"
                            self.root.after(0, lambda: messagebox.showinfo(
                                "Up to Date",
                                f"You have the latest {channel_name} version ({self.current_version})"
                            ))
                    else:
                        raise Exception("Failed to fetch release information")

            except urllib.error.URLError:
                self.root.after(0, lambda: messagebox.showerror(
                    "Update Check Failed",
                    "No internet connection or GitHub unavailable"
                ))
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror(
                    "Update Check Failed",
                    f"Error: {str(e)}"
                ))
            finally:
                self.root.after(0, lambda: self.status_text.config(text="Ready"))

        # Run check in background thread
        threading.Thread(target=check_updates, daemon=True).start()

    def compare_versions(self, version1, version2):
        """Compare two version strings. Returns True if version1 > version2"""
        try:
            v1_parts = [int(x) for x in version1.split('.')]
            v2_parts = [int(x) for x in version2.split('.')]

            # Pad shorter version with zeros
            max_len = max(len(v1_parts), len(v2_parts))
            v1_parts.extend([0] * (max_len - len(v1_parts)))
            v2_parts.extend([0] * (max_len - len(v2_parts)))

            return v1_parts > v2_parts
        except:
            return False

    def show_update_dialog(self, latest_version, release_url, release_notes):
        """Show update available dialog"""
        update_window = tk.Toplevel(self.root)
        update_window.title("Update Available")
        update_window.geometry("500x400")
        update_window.configure(bg=self.bg_color)
        update_window.resizable(False, False)

        # Make it modal
        update_window.transient(self.root)
        update_window.grab_set()

        # Center the window
        update_window.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 50,
            self.root.winfo_rooty() + 50
        ))

        main_frame = ttk.Frame(update_window, style='Dark.TFrame')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)

        # Title
        title_label = ttk.Label(main_frame, text="üéâ Update Available!", style='Title.TLabel')
        title_label.pack(pady=(0, 10))

        # Version info
        version_frame = ttk.Frame(main_frame, style='Card.TFrame')
        version_frame.pack(fill='x', pady=10, padx=10, ipady=10)

        ttk.Label(version_frame, text=f"Current Version: {self.current_version}", style='Card.TLabel').pack(anchor='w', padx=10)
        ttk.Label(version_frame, text=f"Latest Version: {latest_version}", style='Accent.TLabel').pack(anchor='w', padx=10)

        # Release notes
        notes_label = ttk.Label(main_frame, text="Release Notes:", style='Dark.TLabel')
        notes_label.pack(anchor='w', pady=(10, 5))

        # Text widget for release notes
        text_frame = ttk.Frame(main_frame, style='Card.TFrame')
        text_frame.pack(fill='both', expand=True, pady=5)

        text_widget = tk.Text(text_frame, height=8, wrap=tk.WORD,
                             bg=self.card_color, fg=self.text_color,
                             font=('Segoe UI', 9))
        scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=text_widget.yview)
        text_widget.configure(yscrollcommand=scrollbar.set)

        text_widget.pack(side="left", fill="both", expand=True, padx=5, pady=5)
        scrollbar.pack(side="right", fill="y", pady=5)

        text_widget.insert(tk.END, release_notes)
        text_widget.config(state=tk.DISABLED)

        # Buttons
        button_frame = ttk.Frame(main_frame, style='Dark.TFrame')
        button_frame.pack(fill='x', pady=(10, 0))

        def download_update():
            import webbrowser
            webbrowser.open(release_url)
            update_window.destroy()

        def close_dialog():
            update_window.destroy()

        download_btn = ttk.Button(button_frame, text="üîó Download Update",
                                 command=download_update, style='Accent.TButton')
        download_btn.pack(side='left', padx=5)

        close_btn = ttk.Button(button_frame, text="Close", command=close_dialog)
        close_btn.pack(side='right', padx=5)

    def show_channel_settings(self):
        """Show release channel settings dialog"""
        channel_window = tk.Toplevel(self.root)
        channel_window.title("Release Channel Settings")
        channel_window.geometry("400x300")
        channel_window.configure(bg=self.bg_color)
        channel_window.resizable(False, False)

        # Make it modal
        channel_window.transient(self.root)
        channel_window.grab_set()

        # Center the window
        channel_window.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 50,
            self.root.winfo_rooty() + 50
        ))

        main_frame = ttk.Frame(channel_window, style='Dark.TFrame')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)

        # Title
        title_label = ttk.Label(main_frame, text="Release Channel Settings", style='Title.TLabel')
        title_label.pack(pady=(0, 10))

        # Description
        desc_label = ttk.Label(main_frame, text="Choose which type of updates you want to receive:", style='Dark.TLabel')
        desc_label.pack(pady=(0, 20))

        # Channel selection
        self.channel_var = tk.StringVar(value=self.release_channel)

        # Stable option
        stable_frame = ttk.Frame(main_frame, style='Card.TFrame')
        stable_frame.pack(fill='x', pady=5, padx=10, ipady=10)

        stable_radio = ttk.Radiobutton(stable_frame, text="Stable Channel", 
                                     variable=self.channel_var, value="stable",
                                     style='Card.TLabel')
        stable_radio.pack(anchor='w', padx=10, pady=5)

        stable_desc = ttk.Label(stable_frame, 
                              text="‚Ä¢ Stable, tested releases\n‚Ä¢ Recommended for most users\n‚Ä¢ Less frequent updates",
                              style='Card.TLabel')
        stable_desc.pack(anchor='w', padx=30, pady=(0, 5))

        # Beta option
        beta_frame = ttk.Frame(main_frame, style='Card.TFrame')
        beta_frame.pack(fill='x', pady=5, padx=10, ipady=10)

        beta_radio = ttk.Radiobutton(beta_frame, text="Beta Channel", 
                                   variable=self.channel_var, value="beta",
                                   style='Card.TLabel')
        beta_radio.pack(anchor='w', padx=10, pady=5)

        beta_desc = ttk.Label(beta_frame, 
                            text="‚Ä¢ Early access to new features\n‚Ä¢ May contain bugs\n‚Ä¢ More frequent updates",
                            style='Card.TLabel')
        beta_desc.pack(anchor='w', padx=30, pady=(0, 5))

        # Current channel info
        current_frame = ttk.Frame(main_frame, style='Dark.TFrame')
        current_frame.pack(fill='x', pady=10)

        current_label = ttk.Label(current_frame, 
                                text=f"Current channel: {self.release_channel.title()}", 
                                style='Dark.TLabel')
        current_label.pack()

        # Buttons
        button_frame = ttk.Frame(main_frame, style='Dark.TFrame')
        button_frame.pack(fill='x', pady=(20, 0))

        def apply_settings():
            new_channel = self.channel_var.get()
            if new_channel != self.release_channel:
                self.release_channel = new_channel
                self.save_settings()
                messagebox.showinfo("Channel Changed", 
                                  f"Release channel changed to {new_channel.title()}")
            channel_window.destroy()

        def cancel_settings():
            channel_window.destroy()

        apply_btn = ttk.Button(button_frame, text="Apply", 
                             command=apply_settings, style='Accent.TButton')
        apply_btn.pack(side='left', padx=5)

        cancel_btn = ttk.Button(button_frame, text="Cancel", command=cancel_settings)
        cancel_btn.pack(side='right', padx=5)

    def save_settings(self):
        """Save settings to file"""
        try:
            import os
            config_dir = os.path.expanduser("~/.config/universal-battery-limiter")
            os.makedirs(config_dir, exist_ok=True)
            
            config_file = os.path.join(config_dir, "settings.conf")
            with open(config_file, 'w') as f:
                f.write(f"release_channel={self.release_channel}\n")
        except Exception as e:
            print(f"Failed to save settings: {e}")

    def load_settings(self):
        """Load settings from file"""
        try:
            import os
            config_file = os.path.expanduser("~/.config/universal-battery-limiter/settings.conf")
            if os.path.exists(config_file):
                with open(config_file, 'r') as f:
                    for line in f:
                        if line.startswith("release_channel="):
                            self.release_channel = line.split("=")[1].strip()
        except Exception as e:
            print(f"Failed to load settings: {e}")

    # ...existing code...
def main():
    root = tk.Tk()
    app = BatteryControlGUI(root)

    # Handle window close
    def on_closing():
        app.auto_refresh = False
        root.destroy()

    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()
